from django.test import TestCase, Client
from django.urls import reverse

class CardsAppTests(TestCase):
    """Тестирование приложения Cards."""

    def setUp(self):
        # Клиент для тестирования
        self.client = Client()

    def test_app_loads(self):
        """Проверка, что приложение загружается и главная страница доступна."""
        response = self.client.get('/cards/catalog/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "Каталог карточек")

    def test_card_route(self):
        """Проверка маршрута для получения карточки по ID."""
        response = self.client.get('/cards/catalog/1/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "Карточка 1")

    def test_category_route(self):
        """Проверка маршрута для получения карточек по категории."""
        response = self.client.get('/cards/catalog/some-category-slug/')
        self.assertEqual(response.status_code, 200)
        self.assertContains(response, "Категория some-category-slug")


"""
Давайте подробно разберем, как работают тесты в приведенном примере без использования кода:

### Настройка Тестового Клиента

- **Инициализация тестового клиента**: Перед выполнением тестов в методе `setUp` создается экземпляр тестового клиента Django. Этот клиент позволяет имитировать запросы к вашему веб-приложению, как если бы они происходили в реальном браузере, но без необходимости взаимодействия с реальным сервером. Это позволяет тестировать ваше приложение в изолированной среде.

### Тестирование Доступности Приложения

- **Проверка доступности приложения**: В тесте `test_app_loads` используется тестовый клиент для отправки GET-запроса к определенному URL (`/cards/catalog/`). Этот запрос имитирует действие пользователя, заходящего на страницу каталога карточек. После получения ответа от приложения, тест проверяет, что ответ имеет статус-код 200, что означает успешный доступ к странице. Далее, тест проверяет содержимое ответа на наличие определенного текста (`"Каталог карточек"`), подтверждая тем самым, что страница отображается корректно.

### Тестирование Маршрутов

- **Проверка маршрута для получения карточки по ID**: В тесте `test_card_route` клиент отправляет запрос к URL, который должен вести к странице конкретной карточки по ее ID (`/cards/catalog/1/`). Аналогично предыдущему тесту, проверяется статус-код ответа и наличие ожидаемого текста в теле ответа (`"Карточка 1"`), что подтверждает, что маршрут работает правильно, и приложение возвращает детали нужной карточки.

- **Проверка маршрута для получения карточек по категории**: Тест `test_category_route` проверяет маршрут, по которому должны отображаться карточки определенной категории. С помощью тестового клиента отправляется запрос к URL с slug категории (`/cards/catalog/some-category-slug/`). Проверяется, что ответ имеет статус-код 200 и содержит ожидаемый текст (`"Категория some-category-slug"`), что указывает на то, что страница категории отображается правильно и доступна для пользователя.

### Общие Принципы Тестирования

- **Изоляция и воспроизводимость**: Каждый тест выполняется изолированно, что обеспечивает точность результатов и их воспроизводимость. Это важно для надежного тестирования, поскольку позволяет убедиться, что изменения в одной части приложения не влияют на другие его аспекты.
- **Автоматизация**: Тесты выполняются автоматически, что позволяет разработчикам быстро проверять работоспособность приложения после внесения изменений в код, увеличивая эффективность разработки и поддержки проекта.

В целом, эти тесты помогают обеспечить надежность работы веб-приложения, подтверждая, что его основные функции и маршруты доступны и работают как ожидается. Это является ключевым аспектом разработки качественного программного обеспечения.
"""
